//TODO You should document and justify all design changes in the README.md file. You are allowed to
//TODO change your design. However the bigger the change, the more convicing we expect your explantion to be.
# imageprocessing

imageprocessing is a package in Java to (1) filter images and (2) generate geometric images.

## Installation

Install the package and import each class:

```java
import imageprocessing.*;
```

## Usage


### Blurring and Sharpening an Image from a File
Blurring and sharpening are built-in filter methods in the imageprocessing package.
To apply either of these to an image, first create the image (loading it
from a file is a convenient method). Then create the Filter object. They can also create a filter by
inputting the kernel, either a Pixel[][] object or a double[][][] object directly.
Then, the user applies the filter to the image, and a new Image object is created (the old
image is not mutated). Finally, the user can output the new image to a file by specifying the
desired path.
```java
import imageprocessing.*;
Image myImage = new Image("./res/santaferesized.jpg");
Filter blur = new Filter(Filters.BLUR);
Image myBlurredImage = blur.apply(myImage);
myBlurredImage.writeImageToFile("santafe_blurry.png");
```
This code creates a blurred manhattan-small image.


### Applying a Color Transformation to an Image
Similar to Filters, a transformation alters an existing image. But, a transformation acts
differently on different colors channels. This allows you to create greyscale
or sepia images from existing images. Built-in transformations are sepia and greyscale.

```java
import imageprocessing.*;
Image myImage = new Image("./res/shadowresize.jpg");
Transformation sepia = new Transformation(Transformations.SEPIA);
Image mySepiaImage = sepia.apply(myImage);
mySepiaImage.writeImageToFile("shadow_sepia.png");
```



### Generating Rainbow Stripes
It is easy to quickly generate a rainbow stripe images that suits your needs. All you need is to
input a desired height, width, and orientation. Orientation can be horizontal or vertical.

```java
Rainbow testRainbow1 = new Rainbow(150, 140, Orientation.HORIZONTAL);
testRainbow1.writeToFile("RainbowHorizontal.png");
```
This code generates an image 150px tall, 140px wide, with horizontal rainbow stripes.


### Generating Checkerboards

The imageprocessing package also easily allows for checkerboard generation. Just input the desired
square size, in pixels.
```java
CheckerBoard testChecker = new CheckerBoard(5);
testChecker.writeToFile("testCheckerSmall.png");
```


### Flags
Creating a flag requires the width (an integer, in pixels), a country enum, and then the name of
the output filename. The result of this is a flag of France 500px wide,
found in the file ./FlagFrench.png.
```java
import imageprocessing.*;
Flag testFlagFrench = new Flag(500, Country.FRANCE);
testFlagFrench.writeImageToFile("FlagFrench.png");
```


## Licenses
The landscape image and dog image were taken by Alex Gear and Alice Tilles, respectively. The use
of these images for imageprocessing is authorized.