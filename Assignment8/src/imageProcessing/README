# imageProcessing

imageProcessing is a package in Java to (1) filter images and (2) generate geometric images.

## Installation

Install the package and import each class:

```java
import imageProcessing.*;
```

## Usage


### Blurring and Sharpening an Image from a File
Blurring and sharpening are built-in filter methods in the imageProcessing package.
To apply either of these to an image, first create the image (loading it
from a file is a convenient method). Then create the Filter object. If the user inputs a name of a
filter not found in the database, they will get an exception. But, they can also create a filter by
inputting the kernel, either a Pixel[][] object or a double[][][] object directly.
Then, the user applies the filter to the image, and a new Image object is created (the old
image is not mutated). Finally, the user can output the new image to a file by specifying the
desired path.
```java
import imageProcessing.*;
Image myImage = new Image("./images/manhattan-small.png");
Filter blur = new Filter("blur");
Image myBlurredImage = blur.apply(myImage);
myBlurredImage.writeImageToFile("manhattan-small-and-blurry.png");
```
This code creates a blurred manhattan-small image.


### Applying a Color Transformation to an Image
Similar to Filters, a transformation alters an existing image. But, a transformation acts
differently on different colors channels. This allows you to create greyscale
or sepia images from existing images. Built-in transformations are sepia and greyscale.

```java
import imageProcessing.*;
Image myImage = new Image("./images/manhattan-small.png");
Transformation sepia = new Transformation("sepia");
Image mySepiaImage = sepia.apply(myImage);
mySepiaImage.writeImageToFile("manhattan-small-and-vintage.png");
```



### Generating Rainbow Stripes
It is easy to quickly generate a rainbow stripe images that suits your needs. All you need is to
input a desired height, width, and orientation. Orientation can be horizontal or vertical.

```java
Rainbow testRainbow1 = new Rainbow(150, 140, "Horizontal");
testRainbow1.writeToFile("HorizontalRainbow.png");
```
This code generates an image 150px tall, 140px wide, with horizontal rainbow stripes.


### Generating Checkerboards

The imageProcessing package also easily allows for checkerboard generation. Just input the desired
square size, in pixels.
```java
CheckerBoard testChecker = new CheckerBoard(5);
testChecker.writeToFile("testCheckerSmall.png");
```


### Flags
Creating a flag requires the width (an integer, in pixels), a country name, and then the name of
the output filename. The result of this is a flag of France 500px wide,
found in the file ./testFlagFrench.png. If the desired flag is not found in our database, an
exception will be thrown. //TODO
```java
import imageProcessing.*;
Flag testFlagFrench = new Flag(500, "France");
testFlagFrench.writeFlagToFile("testFlagFrench.png");
```







## Contributing
Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

Please make sure to update tests as appropriate.

## License
[MIT](https://choosealicense.com/licenses/mit/)